# -*- coding: utf-8 -*-
"""SR Week 7 & Week 8

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mnkcSqxsFlmEKkDOIcwVzDiMY0H1_uX1

Run the following code to set up the Savile Row environment and define a function for running Savile Row.
"""

import os

srurl="https://www-users.york.ac.uk/peter.nightingale/savilerow/savilerow-1.10.1-linux.tgz"
srdir="savilerow-1.10.1-linux"
![ ! -d $srdir ] && wget $srurl && tar -zxf savilerow-1.10.1-linux.tgz
stub=f"./{srdir}/savilerow -minion-bin {srdir}/bin/minion -satsolver-bin {srdir}/bin/kissat"

def solve(model, param):
  with open("tmp.eprime", "wt") as f:
    f.write(model)
  with open("tmp.param", "wt") as f:
    f.write(param)
  !$stub tmp.eprime tmp.param -run-solver

  try:
    with open("tmp.param.solution", "rt") as f:
      sol=f.read()
    os.remove("tmp.param.solution")
  except FileNotFoundError:
    sol="No solution found."
  print(sol)

"""## **Week 7 Lab**"""

#Forced assign
model = """
language ESSENCE' 1.0
$ The Crystal Maze Puzzle
letting Dom be domain int(1..8)
find x1,x2,x3,x4,x5,x6,x7,x8 : Dom

such that
x1 = 1,

|x1-x2| > 1,
|x1-x3| > 1,
|x1-x4| > 1,
|x1-x5| > 1,
|x2-x4| > 1,
|x2-x5| > 1,
|x2-x6| > 1,
|x3-x4| > 1,
|x3-x7| > 1,
|x4-x5| > 1,
|x4-x7| > 1,
|x4-x8| > 1,
|x5-x6| > 1,
|x5-x7| > 1,
|x5-x8| > 1,
|x6-x8| > 1,
|x7-x8| > 1,

allDiff([x1,x2,x3,x4,x5,x6,x7,x8])


"""
param = """
language ESSENCE' 1.0





"""

solve(model, param)

#Graph parameterized
model = """
$ The Crystal Maze Puzzle

language ESSENCE' 1.0

$ We are fixing the nodes
letting Dom be domain int(1..8)

$ But parameterising on the edges
$ The edges are represented as pairs of integers [i,j]
$  where are i and j are node indices. The edges matrix contains numEdges such pairs
given edges: matrix indexed by[int(1..numEdges), int(1..2)] of int

$ An easy way to get hold of the variables by their names is to put them into an array:
find nodes: matrix indexed by[int(1..8)] of Dom

such that

forAll edge : int(1..numEdges) .
  |nodes[edges[edge,1]] - nodes[edges[edge,2]]| > 1,

allDiff(nodes)

"""
param = """
language ESSENCE' 1.0
letting edges be [[1,2],
                  [1,3],
                  [1,4],
                  [1,5],
                  [2,4],
                  [2,5],
                  [2,6],
                  [3,4],
                  [3,7],
                  [4,5],
                  [4,7],
                  [4,8],
                  [5,6],
                  [5,7],
                  [5,8],
                  [6,8],
                  [7,8]]
"""

solve(model, param)

#Fully parameterized
model = """
language ESSENCE' 1.0

$ The Crystal Maze Puzzle
$ We are fixing the nodes

given noNodes: int

$ But parameterising on the edges
$ The edges are represented as pairs of integers [i,j]
$  where are i and j are node indices. The edges matrix contains numEdges such pairs
given edges: matrix indexed by[int(1..numEdges), int(1..2)] of int

$ An easy way to get hold of the variables by their names is to put them into an array:
find nodes: matrix indexed by[int(1..noNodes)] of int(1..noNodes)

such that

forAll edge : int(1..numEdges) .
  |nodes[edges[edge,1]] - nodes[edges[edge,2]]| > 1,

allDiff(nodes)


"""
param = """
letting noNodes be 8
letting edges be [[1,2],
                  [1,3],
                  [1,4],
                  [1,5],
                  [2,4],
                  [2,5],
                  [2,6],
                  [3,4],
                  [3,7],
                  [4,5],
                  [4,7],
                  [4,8],
                  [5,6],
                  [5,7],
                  [5,8],
                  [6,8],
                  [7,8]]
"""

solve(model, param)

#Two solutions
model = """
language ESSENCE' 1.0

$ The Crystal Maze Puzzle
$ We are fixing the nodes
given noNodes: int

$ But parameterising on the edges
$ The edges are represented as pairs of integers [i,j]
$  where are i and j are node indices. The edges matrix contains numEdges such pairs
given edges: matrix indexed by[int(1..numEdges), int(1..2)] of int

$ An easy way to get hold of the variables by their names is to put them into an array:
find nodes: matrix indexed by[int(1..noNodes)] of int(1..noNodes)

such that

forAll edge : int(1..numEdges) .
  |nodes[edges[edge,1]] - nodes[edges[edge,2]]| > 1,

allDiff(nodes)


"""
param = """
language ESSENCE' 1.0

letting noNodes be 4
letting edges be [[1,2],[1,3],[2,4]]
"""

solve(model, param)